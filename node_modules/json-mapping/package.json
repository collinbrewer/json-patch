{
  "name": "json-mapping",
  "version": "0.0.1",
  "description": "JSON Mapping is a spec and utility for mapping values from one form to another.",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "mocha spec"
  },
  "repository": {
    "type": "git",
    "url": "git+https://collinbrewer@bitbucket.org/collinbrewer/json-mapping.git"
  },
  "author": {
    "name": "Collin Brewer",
    "email": "collin@brewer-collective.com"
  },
  "license": "MIT",
  "gitHead": "739c9840dc04777055381520cfd9c379e9aa61b2",
  "readme": "# JSON Mapping\n\nJSON Mapping is a spec and utility for mapping values from one form to another.\n\nIt's purpose is to allow flexibility in otherwise rigid systems in addition to offering a serializable structure for defining how data is converted.\n\nIt's also pretty powerful.  For example, a simple mapping can allow you to index an array by a key very simply:\n\n```javascript\n\nvar array=[\n   {name:\"Chris\", email:\"chris@server.com\"},\n   {name:\"Eric\", email:\"eric@server.com\"}\n];\n\nvar mapping={\n   \"sourcePath\":\".\", // the current data\n   \"destinationPath\":\"email\" // ...is mapped to name:{}\n};\n\nvar indexed=JSONMapping.toMapping(mapping, array);\n```\n\nThis would yield:\n\n```javascript\n{\n   \"chris@server.com\": {name:\"Chris\", email:\"chris@server.com\"},\n   \"eric@server.com\": {name:\"Eric\", email:\"eric@server.com\"}\n}\n```\n\n\n## Spec\n\n### Mapping\n\n#### sourcePath\nThe source path.\n\n#### destinationPath\nThe destination path.\n\n### Object Mapping\nTo map an object's keys, a source key is provided along with a destination key.\n\n``` javascript\n{\n   sourcePath: \"old\",\n   destinationPath: \"new\"\n}\n```\n\n### Array Mapping\nMapping an array is a bit more complicated.\n\n```javascript\n{\n   sourcePath: 0, // move the value from index 0\n   destinationPath: 1 // ...to index 1\n}\n```\n\n### Mixed Mapping\nIt's also possible to map across boundaries using paths.\n\n```javascript\n{\n   sourcePath: \"0\", // [{name:\"Chris\", email:\"chris@server.com\"}]\n   destinationPath: \"$source.email\", // {}\n}\n```\n\n### Dynamic Typing - NIMP\nFor those ever-annoying special cases, a custom mapping function can be used.\n\n```javascript\n{\n   to: function(source, sourceBaseKeyPath, sourceKey){\n      return \"destinationKey\";\n   },\n\n   from: function(destination, destinationBaseKeyPath, destinationKey){\n      return \"sourceKey\";\n   }\n}\n```\n\n## Utility\nThe utility defines a few simple methods.\n\n### toMapping\nConverts data from the source form to destination form in the mapping.\n\n### fromMapping\nConverts data to the destination form from the source form in the mapping.\n\n### inverse\nInverses the source and destination mapping.\n",
  "readmeFilename": "README.markdown",
  "homepage": "https://bitbucket.org/collinbrewer/json-mapping#readme",
  "_id": "json-mapping@0.0.1",
  "_shasum": "4fcc364c53108f93c0d461737cbcf74565958182",
  "_from": "git+https://collinbrewer@bitbucket.org/collinbrewer/json-mapping.git",
  "_resolved": "git+https://collinbrewer@bitbucket.org/collinbrewer/json-mapping.git#739c9840dc04777055381520cfd9c379e9aa61b2"
}
